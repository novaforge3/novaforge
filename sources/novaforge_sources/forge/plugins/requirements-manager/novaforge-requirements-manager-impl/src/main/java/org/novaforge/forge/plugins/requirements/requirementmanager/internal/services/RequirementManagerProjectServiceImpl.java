/*
 * Copyright (c) 2011-2015, BULL SAS, NovaForge Version 3 and above.
 *
 * This file is free software: you may redistribute and/or modify it under
 * the terms of the GNU Affero General Public License as published by the
 * Free Software Foundation, version 3 of the License.
 *
 * This file is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see http://www.gnu.org/licenses.
 *
 * Additional permission under GNU AGPL version 3 (AGPL-3.0) section 7.
 *
 * If you modify this Program, or any covered work, by linking or combining
 * it with libraries listed in COPYRIGHT file at the top-level directory of
 * this distribution (or a modified version of that libraries), containing parts
 * covered by the terms of licenses cited in the COPYRIGHT file, the licensors
 * of this Program grant you additional permission to convey the resulting work.
 */
package org.novaforge.forge.plugins.requirements.requirementmanager.internal.services;

import org.novaforge.forge.core.plugins.domain.plugin.InstanceConfiguration;
import org.novaforge.forge.core.plugins.domain.plugin.PluginMembership;
import org.novaforge.forge.core.plugins.domain.plugin.PluginProject;
import org.novaforge.forge.core.plugins.exceptions.PluginServiceException;
import org.novaforge.forge.core.plugins.services.PluginProjectService;
import org.novaforge.forge.plugins.commons.services.AbstractPluginProjectService;
import org.novaforge.forge.tools.requirements.common.exceptions.RequirementManagerServiceException;
import org.novaforge.forge.tools.requirements.common.exceptions.RequirementOrganizationServiceException;
import org.novaforge.forge.tools.requirements.common.factories.RequirementFactory;
import org.novaforge.forge.tools.requirements.common.model.IProject;
import org.novaforge.forge.tools.requirements.common.model.User;
import org.novaforge.forge.tools.requirements.common.services.RequirementManagerService;
import org.novaforge.forge.tools.requirements.common.services.RequirementOrganizationService;

import java.util.List;

/**
 * @author generated by Maven Archetype
 */
public class RequirementManagerProjectServiceImpl extends AbstractPluginProjectService implements
    PluginProjectService
{

  private RequirementManagerService      requirementManagerService;

  private RequirementFactory             requirementFactory;

  private RequirementOrganizationService requirementOrganizationService;

  /**
   * {@inheritDoc}
   */
  @Override
  protected String createToolProject(final InstanceConfiguration instanceConfiguration,
      final PluginProject pluginProject, final List<PluginMembership> pluginMemberships)
      throws PluginServiceException
  {
    final StringBuilder projectId = new StringBuilder(pluginProject.getProjectId());
    projectId.append("_").append(instanceConfiguration.getConfigurationId());
    try
    {
      final IProject project = requirementFactory.buildNewProject();
      project.setProjectId(projectId.toString());
      project.setName(pluginProject.getName());
      project.setDescription(pluginProject.getDescription());
      requirementManagerService.createProject(project);

      // Create the memberships for users
      for (final PluginMembership pluginMembership : pluginMemberships)
      {
        final String forgeRole = pluginMembership.getRole();
        final String instanceId = instanceConfiguration.getInstanceId();
        if (pluginRoleMappingService.existToolRole(instanceId, forgeRole))
        {
          final String toolRole = pluginRoleMappingService.getToolRole(instanceId, forgeRole);
          final User user = requirementOrganizationService.buildUser(pluginMembership.getPluginUser()
              .getLogin(), pluginMembership.getPluginUser().getFirstName(), pluginMembership.getPluginUser()
              .getName());
          requirementOrganizationService.addMembership(user, toolRole, projectId.toString());
        }
      }
    }
    catch (final RequirementManagerServiceException e)
    {
      throw new PluginServiceException(String.format(
          "Unable to create requirements project with [project_id=%s]", projectId), e);
    }
    catch (final RequirementOrganizationServiceException e)
    {
      throw new PluginServiceException(String.format("Unable to instanciate project with [project_id=%s]",
          projectId), e);
    }
    return projectId.toString();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  protected boolean deleteToolProject(final InstanceConfiguration instanceConfiguration)
      throws PluginServiceException
  {
    final String toolProjectId = instanceConfiguration.getToolProjectId();
    try
    {
      // delete all memberships for the project
      requirementOrganizationService.deleteAllProjectMemberships(toolProjectId);

      // delete the project
      requirementManagerService.deleteProject(toolProjectId);
      return true;
    }
    catch (final RequirementManagerServiceException e)
    {
      throw new PluginServiceException(String.format(
          "Unable to delete requirements project with [project_id=%s]", toolProjectId), e);
    }
    catch (final RequirementOrganizationServiceException e)
    {
      throw new PluginServiceException(String.format(
          "Unable to delete requirements project with [project_id=%s]", toolProjectId), e);
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void archiveProject(final String pInstanceId) throws PluginServiceException
  {
    // TODO
  }

  /**
   * {@inheritDoc}
   */
  @Override
  protected boolean updateToolProject(final InstanceConfiguration instanceConfiguration,
                                      final PluginProject pluginProject) throws PluginServiceException
  {
    return true;
  }

  public void setRequirementManagerService(final RequirementManagerService pRequirementManagerService)
  {
    requirementManagerService = pRequirementManagerService;
  }

  public void setRequirementFactory(final RequirementFactory pRequirementFactory)
  {
    requirementFactory = pRequirementFactory;
  }

  public void setRequirementOrganizationService(
      final RequirementOrganizationService pRequirementOrganizationService)
  {
    requirementOrganizationService = pRequirementOrganizationService;
  }

}
