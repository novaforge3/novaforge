diff -rNU5 dokuwiki/conf/acronyms.conf dokuwiki-2016-06-26a/conf/acronyms.conf
--- dokuwiki/conf/acronyms.conf	2016-07-03 18:08:51.000000000 +0200
+++ dokuwiki-2016-06-26a/conf/acronyms.conf	2017-01-31 16:06:13.931140800 +0100
@@ -2,57 +2,115 @@
 
 ACL          Access Control List
 AFAICS       As far as I can see
 AFAIK        As far as I know
 AFAIR        As far as I remember
+AJAX         Asynchronous JavaScript and XML
+AIM          AOL (America Online) Instant Messenger
+AOL          America Online
 API          Application Programming Interface
 ASAP         As soon as possible
 ASCII        American Standard Code for Information Interchange
+ASP          Active Server Pages
 BTW          By the way
+CGI          Common Gateway Interface
 CMS          Content Management System
 CSS          Cascading Style Sheets
+CVS          Concurrent Versions System
+DBA          Database Administrator
+DHCP         Dynamic Host Configuration Protocol
+DHTML        Dynamic HyperText Markup Language
+DMCA         Digital Millenium Copyright Act
 DNS          Domain Name System
+DOM          Document Object Model
+DTD          Document Type Definition
 EOF          End of file
 EOL          End of line
 EOM          End of message
 EOT          End of text
+ESMTP        Extended Simple Mail Transfer Protocol
 FAQ          Frequently Asked Questions
+FDL          GNU Free Documentation License
 FTP          File Transfer Protocol
 FOSS         Free & Open-Source Software
 FLOSS        Free/Libre and Open Source Software
 FUD          Fear, Uncertainty, and Doubt
 GB           Gigabyte
 GHz          Gigahertz
+GIF          Graphics Interchange Format
 GPL          GNU General Public License
 GUI          Graphical User Interface
 HTML         HyperText Markup Language
+HTTP         Hyper Text Transfer Protocol
 IANAL        I am not a lawyer (but)
+ICANN        Internet Corporation for Assigned Names and Numbers
+ICQ          I seek you (Instant Messenger)
+IE5          Internet Explorer 5
+IE6          Internet Explorer 6
 IE           Internet Explorer
 IIRC         If I remember correctly
+IIS          Internet Information Services
+IMAP         Internet Message Access Protocol
 IMHO         In my humble opinion
 IMO          In my opinion
 IOW          In other words
 IRC          Internet Relay Chat
 IRL          In real life
+ISO          International Organization for Standardization
+ISP          Internet Service Provider
+JDK          Java Development Kit
+JPEG         Joint Photographics Experts Group
+JPG          Joint Photographics Experts Group
+JS           JavaScript
 KISS         Keep it simple stupid
 LAN          Local Area Network
+LDAP         Lightweight Directory Access Protocol
 LGPL         GNU Lesser General Public License
 LOL          Laughing out loud
 MathML       Mathematical Markup Language
 MB           Megabyte
 MHz          Megahertz
+MIME         Multipurpose Internet Mail Extension
+MIT          Massachusetts Institute of Technology
+MML          Mathematical Markup Language
+MP3          Moving Picture Experts Group Layer 3
+MPEG         Moving Picture Experts Group
+MSDN         Microsoft Developer Network
+MS           Microsoft
 MSIE         Microsoft Internet Explorer
+NIS          Network Information Service
+NS4.7        Netscape 4.7
+NS4          Netscape 4
+NS6          Netscape 6
+NS7          Netscape 7
 OMG          Oh my God
+OPML         Outline Processor Markup Language
 OS           Operating System
 OSS          Open Source Software
 OTOH         On the other hand
+P2P          Peer to Peer
+PDA          Personal Digital Assistant
+PDF          Portable Document Format
+Perl         Practical Extraction and Report Language
+PERL         Practical Extraction and Report Language
+PHP          Hypertext Preprocessor
+PICS         Platform for Internet Content Selection
+PIN          Personal Identification Number
 PITA         Pain in the Ass
+PNG          Portable Network Graphics
+POP3         Post Office Protocol 3
+POP          Post Office Protocol
+QoS          Quality of Service
+RAID         Redundant Array of Inexpensive Disks
+RDF          Resource Description Framework
 RFC          Request for Comments
 ROTFL        Rolling on the floor laughing
 RTFM         Read The Fine Manual
 spec         specification
 TIA          Thanks in advance
+TIFF         Tagged Image File Format
+TLD          Top Level Domain
 TL;DR        Too long; didn't read
 TOC          Table of Contents
 URI          Uniform Resource Identifier
 URL          Uniform Resource Locator
 W3C          World Wide Web Consortium
diff -rNU5 dokuwiki/inc/RemoteAPICore.php dokuwiki-2016-06-26a/inc/RemoteAPICore.php
--- dokuwiki/inc/RemoteAPICore.php	2016-07-03 18:08:51.000000000 +0200
+++ dokuwiki-2016-06-26a/inc/RemoteAPICore.php	2017-01-31 16:20:24.642249000 +0100
@@ -42,11 +42,12 @@
                 'doc' => 'Tries to logoff by expiring auth cookies and the associated PHP session.'
             ), 'dokuwiki.getPagelist' => array(
                 'args' => array('string', 'array'),
                 'return' => 'array',
                 'doc' => 'List all pages within the given namespace.',
-                'name' => 'readNamespace'
+                'name' => 'readNamespace',
+            	'public' => '1'
             ), 'dokuwiki.search' => array(
                 'args' => array('string'),
                 'return' => 'array',
                 'doc' => 'Perform a fulltext search and return a list of matching pages'
             ), 'dokuwiki.getTime' => array(
@@ -69,10 +70,11 @@
             ),  'wiki.getPage' => array(
                 'args' => array('string'),
                 'return' => 'string',
                 'doc' => 'Get the raw Wiki text of page, latest version.',
                 'name' => 'rawPage',
+				'public' => '1'
             ), 'wiki.getPageVersion' => array(
                 'args' => array('string', 'int'),
                 'name' => 'rawPage',
                 'return' => 'string',
                 'doc' => 'Return a raw wiki page'
@@ -93,11 +95,12 @@
                 'name' => 'listPages'
             ), 'wiki.getAttachments' => array(
                 'args' => array('string', 'array'),
                 'return' => 'array',
                 'doc' => 'Returns a list of all media files.',
-                'name' => 'listAttachments'
+                'name' => 'listAttachments',
+            	'public' => '1'
             ), 'wiki.getBackLinks' => array(
                 'args' => array('string'),
                 'return' => 'array',
                 'doc' => 'Returns the pages that link to this page.',
                 'name' => 'listBackLinks'
@@ -116,12 +119,13 @@
                 'return' => 'array',
                 'doc' => 'Returns the available revisions of the page.',
                 'name' => 'pageVersions'
             ), 'wiki.putPage' => array(
                 'args' => array('string', 'string', 'array'),
-                'return' => 'bool',
-                'doc' => 'Saves a wiki page.'
+                'return' => 'string',
+                'doc' => 'Saves a wiki page.',
+            	'public' => '1'
             ), 'wiki.listLinks' => array(
                 'args' => array('string'),
                 'return' => 'array',
                 'doc' => 'Lists all links contained in a wiki page.'
             ), 'wiki.getRecentChanges' => array(
@@ -137,20 +141,23 @@
                 'return' => 'int',
                 'doc' => 'Returns the permissions of a given wiki page. By default, for current user/groups'
             ), 'wiki.putAttachment' => array(
                 'args' => array('string', 'file', 'array'),
                 'return' => 'array',
-                'doc' => 'Upload a file to the wiki.'
+                'doc' => 'Upload a file to the wiki.',
+            	'public' => '1'
             ), 'wiki.deleteAttachment' => array(
                 'args' => array('string'),
                 'return' => 'int',
-                'doc' => 'Delete a file from the wiki.'
+                'doc' => 'Delete a file from the wiki.',
+            	'public' => '1'
             ), 'wiki.getAttachment' => array(
                 'args' => array('string'),
                 'doc' => 'Return a media file',
                 'return' => 'file',
                 'name' => 'getAttachment',
+				'public' => '1'
             ), 'wiki.getAttachmentInfo' => array(
                 'args' => array('string'),
                 'return' => 'array',
                 'doc' => 'Returns a struct with info about the attachment.'
             ), 'dokuwiki.getXMLRPCAPIVersion' => array(
@@ -163,10 +170,61 @@
                 'args' => array(),
                 'name' => 'wiki_RPCVersion',
                 'return' => 'int',
                 'doc' => 'Returns 2 with the supported RPC API version.',
                 'public' => '1'
+		   /***************************************
+           * Method used for NovaForge Integration
+           ****************************************/
+           ), 'novaforge.createUser' => array(
+           	'args' => array('string', 'string','string', 'string', 'string','array', 'boolean'),
+           	'name' => 'createUser',
+           	'return' => 'int',
+           	'doc' => 'Creates a new user',
+           	'public' => '1'
+           ), 'novaforge.updateUser' => array(
+           	'args' => array('string','string', 'string','string', 'string', 'string','array', 'boolean'),
+           	'name' => 'updateUser',
+           	'return' => 'int',
+           	'doc' => 'Updates the informations of the user identified by username',
+           	'public' => '1'
+           ), 'novaforge.deleteUser' => array(
+           	'args' => array('string'),
+           	'name' => 'deleteUser',
+           	'return' => 'int',
+           	'doc' => 'Delete user according specific username.',
+           	'public' => '1'
+           ),  'novaforge.hasUser' => array(
+           	'args' => array('string'),
+           	'name' => 'hasUser',
+           	'return' => 'int',
+           	'doc' => 'Check if username is existing.',
+           	'public' => '1'
+           ), 'novaforge.setUserPermission' => array(
+           	'args' => array('string','string','int'),
+           	'name' => 'setUserPermission',
+           	'return' => 'int',
+           	'doc' => 'Set specific permission to a user for a given namespace.',
+           	'public' => '1'
+           ), 'novaforge.deleteUserPermission' => array(
+           	'args' => array('string','string'),
+           	'name' => 'deleteUserPermission',
+           	'return' => 'int',
+           	'doc' => 'Delete user access to a given namespace.',
+           	'public' => '1'
+           ), 'novaforge.deletePage' => array(
+           	'args' => array('string'),
+           	'name' => 'deletePage',
+           	'return' => 'int',
+           	'doc' => 'Delete a page.',
+           	'public' => '1'
+           ), 'novaforge.updatePage' => array(
+           	'args' => array('string', 'string', 'string'),
+           	'name' => 'updatePage',
+           	'return' => 'int',
+           	'doc' => 'Update a page content.',
+           	'public' => '1'
             ),
 
         );
     }
 
@@ -522,11 +580,11 @@
         unlock($id);
 
         // run the indexer if page wasn't indexed yet
         idx_addPage($id);
 
-        return true;
+        return $id;
     }
 
     /**
      * Appends text to a wiki page.
      *
@@ -566,11 +624,12 @@
 
         $ftmp = $conf['tmpdir'] . '/' . md5($id.clientIP());
 
         // save temporary file
         @unlink($ftmp);
-        io_saveFile($ftmp, $file);
+        $buff = base64_decode($file);
+        io_saveFile($ftmp, $buff);
 
         $res = media_save(array('name' => $ftmp), $id, $params['ow'], $auth, 'rename');
         if (is_array($res)) {
             throw new RemoteException($res[0], -$res[1]);
         } else {
@@ -948,7 +1007,284 @@
             $id = cleanID($conf['start']);
         }
         return $id;
     }
 
-}
+	/***************************************
+    * Method used for NovaForge Integration
+    ****************************************/
+    function createUser($username,$firstname,$lastname, $email, $password, $grps, $notify = false){
+        global $auth;
+        $check = checkSecurityToken();
+        
+        if ( (auth_isadmin() == false) || (!$auth->canDo('addUser')) ){
+            return new IXR_Error(1, 'You are not allowed to create a new user.');
+        }   
+        list($user,$pass,$name,$mail,$grps) = $this->_retrieveUser($username,$password,$firstname .' '.$lastname,$email,$grps,$clean=true);
+        if (empty($user)) return false;
+        
+        if ($auth->canDo('modPass')){
+          if (empty($pass)){
+            if(!$notify){
+              $pass = auth_pwgen();
+            } else {
+                return new IXR_Error(1, "The password shouldn't be empty.");
+            }
+          }
+        } else {
+          if (!empty($pass)){
+                return new IXR_Error(1, 'The password is not empty, and you are not allowed to modify it.');
+          }
+        }
+
+        if ($auth->canDo('modName')){
+          if (empty($name)){
+                return new IXR_Error(1, "The name shouldn't be empty.");
+          }
+        } else {
+          if (!empty($name)){
+                return new IXR_Error(1, 'The name is not empty, and you are not allowed to modify it.');
+          }
+        }
+
+        if ($auth->canDo('modMail')){
+          if (empty($mail)){
+                return new IXR_Error(1, "The email shouldn't be empty.");
+          }
+        } else {
+          if (!empty($mail)){
+                return new IXR_Error(1, "The email is not empty, and you are not allowed to modify it.'");
+          }
+        }
+
+        if ($ok = $auth->triggerUserMod('create', array($user,$pass,$name,$mail,$grps))) {
 
+          if (!empty($_REQUEST['usernotify']) && $pass) {
+            $this->_notifyUser($user,$pass);
+          }
+        } else {
+                return new IXR_Error(1, "Unable to create user. See log to get more information.");
+        }
+
+        return $ok;
+    }
+    
+    
+    function _retrieveUser($username,$pass,$name,$email,$grps,$clean=true) {
+    	global $auth;
+    
+    	$user[0] = ($clean) ? $auth->cleanUser($username) : $username;
+    	$user[1] = $pass;
+    	$user[2] = $name;
+    	$user[3] = $email;
+    
+    	$user[4] = array_map('trim',$grps);
+    	if($clean) $user[4] = array_map(array($auth,'cleanGroup'),$user[4]);
+    	$user[4] = array_filter($user[4]);
+    	$user[4] = array_unique($user[4]);
+    	if(!count($user[4])) $user[4] = null;
+    
+    	return $user;
+    }
+    
+    function updateUser($username_old,$username_new,$firstname,$lastname, $email, $password, $grps, $notify = false){
+    	global $auth;
+    
+    	if ( (auth_isadmin() == false) || (!$auth->canDo('UserMod')) ){
+    		return new IXR_Error(1, 'You are not allowed to update user information.');
+    	}
+    	// get currently valid  user data
+    	$olduser = $auth->cleanUser($username_old);
+    	$oldinfo = $auth->getUserData($olduser);
+    
+    	// get new user data subject to change
+    	list($newuser,$newpass,$newname,$newmail,$newgrps) = $this->_retrieveUser($username_new,$password,$firstname .' '.$lastname,$email,$grps,$clean=true);
+    	if (empty($newuser)) {
+    		return new IXR_Error(1, 'New username is empty. It should be a new one or use old one.');
+    	}
+    
+    	$changes = array();
+    	if ($newuser != $olduser) {
+    
+    		if (!$auth->canDo('modLogin')) {        // sanity check, shouldn't be possible
+    			return new IXR_Error(1, 'You are not allowed to update user login.');
+    		}
+    
+    		// check if $newuser already exists
+    		if ($auth->getUserData($newuser)) {
+    			return new IXR_Error(1, 'The new username is already existing.');
+    		} else {
+    			$changes['user'] = $newuser;
+    		}
+    	}
+    
+    	// generate password if left empty and notification is on
+    	if(!empty($notify) && empty($newpass)){
+    		$newpass = auth_pwgen();
+    	}
+    
+    	if (!empty($newpass) && $auth->canDo('modPass'))
+    		$changes['pass'] = $newpass;
+    	if (!empty($newname) && $auth->canDo('modName') && $newname != $oldinfo['name'])
+    		$changes['name'] = $newname;
+    	if (!empty($newmail) && $auth->canDo('modMail') && $newmail != $oldinfo['mail'])
+    		$changes['mail'] = $newmail;
+    	if (!empty($newgrps) && $auth->canDo('modGroups') && $newgrps != $oldinfo['grps'])
+    		$changes['grps'] = $newgrps;
+    
+    	if ($ok = $auth->triggerUserMod('modify', array($olduser, $changes))) {
+    
+    		if (!empty($notify) && $newpass) {
+    			$notify = empty($changes['user']) ? $olduser : $newuser;
+    			$this->_notifyUser($notify,$newpass);
+    		}
+    
+    		// invalidate all sessions
+    		io_saveFile($conf['cachedir'].'/sessionpurge',time());
+    
+    	} else {
+    		return new IXR_Error(1, 'Unable to update user information.');
+    	}
+    
+    	return $ok;
+    }
+    
+    function hasUser($username){
+    	global $auth;
+    	if ( (auth_isadmin() == false) || (!$auth->canDo('UserMod')) ){
+    		return new IXR_Error(1, 'You are not allowed to update user information.');
+    	}
+    	$cleanuser = $auth->cleanUser($username);
+    	if ($auth->getUserData($cleanuser)) {
+    		return true;
+    	} else {
+    		return false;
+    	}
+    }
+    
+    function setUserPermission($startpage,$username,$perm) {
+    
+    	return $this->manageUserPermission($startpage,$username,$perm);
+    }
+    
+    function deleteUserPermission($startpage,$username) {
+    
+    	return $this->manageUserPermission($startpage,$username);
+    }
+    
+    function manageUserPermission($startpage,$username,$perm = '') {
+    
+    	global $auth;
+    
+    	$startpage = cleanID($startpage);
+    	$cleanuser = $auth->cleanUser($username);
+    
+    	if(empty($startpage))
+    		return new IXR_Error(1, 'Empty page ID');
+    
+    	if(!page_exists($startpage))
+    		return new IXR_ERROR(1, 'Page ID doesn\'t exist.');
+    
+    	if (!$this->hasUser($cleanuser))
+    		return new IXR_ERROR(1, 'User ' . $cleanuser .'doesn\'t exist.');
+    
+    	// Define name space scope
+    	$scope = getNS($startpage) . ':*';
+    	$admin_plugin_acl = new admin_plugin_acl();
+    	$admin_plugin_acl->_init_acl_config();
+    	 
+    	// delete current permission
+    	$success=$admin_plugin_acl->_acl_del($scope, $cleanuser);
+    
+    	if (!empty($perm))
+    		// add new one if not empty
+    		$success = $admin_plugin_acl->_acl_add($scope, $cleanuser, $perm);
+    
+    	return $success;
+    }
+    
+    function deletePage($id) {
+    	global $auth;
+    
+    	$id = cleanID($id);
+    
+    	if(empty($id))
+    		return new IXR_Error(1, 'Empty page ID');
+    
+    	if(!page_exists($id))
+    		return new IXR_ERROR(1, 'Page ID doesn\'t exist.');
+    
+    
+    	if(auth_quickaclcheck($id) < AUTH_DELETE)
+    		return new IXR_Error(1, 'You are not allowed to delete this page : ' . $id);
+    
+    	// Check, if page is locked
+    	if(checklock($id))
+    		return new IXR_Error(1, 'The page is currently locked');
+    
+    	// SPAM check
+    	if(checkwordblock())
+    		return new IXR_Error(1, 'Positive wordblock check');
+    
+    	// Delete namespace on file system
+    	lock($id);
+    	saveWikiText($id,'','');
+    	unlock($id);
+    
+    	// Delete all acl existing for this namespace
+    	$scope = getNS($id) . ':*';
+    	$admin_plugin_acl = new admin_plugin_acl();
+    	$admin_plugin_acl->_init_acl_config();
+    	$users = array_keys($auth->retrieveUsers());
+    	foreach ($users as $user)
+    	{
+    		// delete permission
+    		$admin_plugin_acl->_acl_del($scope, $user);
+    	}
+    	return true;
+    }
+    
+    function deleteUser($username){
+    	global $auth;
+    	global $conf;
+    
+    	if ( (auth_isadmin() == false) || (!$auth->canDo('delUser')) ){
+    		return new IXR_Error(1, 'You are not allowed to delete user data.');
+    	}
+    
+    	if($_SERVER['REMOTE_USER'] == $username) {
+    		return new IXR_Error(1, 'Unable to delete yourself because your are administrator.');
+    	}
+    	$users = array('username' => $username);
+    	$count = $auth->triggerUserMod('delete', array($users));
+    
+    	if ($count != 1) {
+    		return new IXR_Error(1, 'Unable to delete user with [username=' . $username .']' );
+    	}
+    
+    	// Delete all acl existing for this user for all namespace
+    	$admin_plugin_acl = new admin_plugin_acl();
+    	$admin_plugin_acl->_init_acl_config();
+    	$namespaces = $this->searchAllNameSpace();
+    	foreach ($namespaces as $namespace)
+    	{
+    		// delete permission
+    		$scope = $namespace['id'] . ':*';
+    		$admin_plugin_acl->_acl_del($scope, $username);
+    	}
+    
+    	// invalidate all sessions
+    	io_saveFile($conf['cachedir'].'/sessionpurge',time());
+    
+    	return true;
+    }
+    
+    function searchAllNameSpace(){
+    	global $conf;
+    	search($namespaces,$conf['datadir'],'search_namespaces','');
+    	return $namespaces;
+    }
+    
+	/***************************************
+    * Method used for NovaForge Integration
+    ****************************************/
+ }
diff -rNU5 dokuwiki/inc/auth.php dokuwiki-2016-06-26a/inc/auth.php
--- dokuwiki/inc/auth.php	2016-07-03 18:08:51.000000000 +0200
+++ dokuwiki-2016-06-26a/inc/auth.php	2017-01-30 17:36:45.651996500 +0100
@@ -219,10 +219,14 @@
     $sticky ? $sticky = true : $sticky = false; //sanity check
 
     if(!$auth) return false;
 
     if(!empty($user)) {
+		// When user has been propagated by forge, we should send hash password to auth mecanism
+        if($conf['forge']['auth']['forwardDoubleHash'] == 1) {
+           $pass = sha1($pass);
+        }
         //usual login
         if(!empty($pass) && $auth->checkPass($user, $pass)) {
             // make logininfo globally available
             $INPUT->server->set('REMOTE_USER', $user);
             $secret                 = auth_cookiesalt(!$sticky, true); //bind non-sticky to session
diff -rNU5 dokuwiki/inc/pageutils.php dokuwiki-2016-06-26a/inc/pageutils.php
--- dokuwiki/inc/pageutils.php	2016-07-03 18:08:51.000000000 +0200
+++ dokuwiki-2016-06-26a/inc/pageutils.php	2017-01-31 16:13:12.211280100 +0100
@@ -1,6 +1,7 @@
 <?php
+require_once(DOKU_INC.'inc/forgeutils.php');
 /**
  * Utilities for handling pagenames
  *
  * @license    GPL 2 (http://www.gnu.org/licenses/gpl.html)
  * @author     Andreas Gohr <andi@splitbrain.org>
@@ -26,11 +27,16 @@
     /** @var Input $INPUT */
     global $INPUT;
     global $conf;
     global $ACT;
 
-    $id = $INPUT->str($param);
+    $instance_id = $INPUT->str($conf['forge']['instance']['id']);
+    if(!empty($instance_id)){
+    	$id = getStartingId($instance_id);
+    } else {    
+    	$id = $INPUT->str($param);
+    }
 
     //construct page id from request URI
     if(empty($id) && $conf['userewrite'] == 2){
         $request = $INPUT->server->str('REQUEST_URI');
         $script = '';
diff -rNU5 dokuwiki/index.php dokuwiki-2016-06-26a/index.php
--- dokuwiki/index.php	2016-07-03 18:08:51.000000000 +0200
+++ dokuwiki-2016-06-26a/index.php	2017-01-30 15:31:09.799439400 +0100
@@ -12,11 +12,11 @@
  *
  * @license    GPL 2 (http://www.gnu.org/licenses/gpl.html)
  * @author     Andreas Gohr <andi@splitbrain.org>
  */
 if(php_sapi_name() != 'cli-server') {
-    header("Location: doku.php");
+    header("Location: doku.php?do=caslogin");
     exit;
 }
 
 # ROUTER starts below
 
diff -rNU5 dokuwiki/lib/tpl/dokuwiki/main.php dokuwiki-2016-06-26a/lib/tpl/dokuwiki/main.php
--- dokuwiki/lib/tpl/dokuwiki/main.php	2016-07-03 18:08:51.000000000 +0200
+++ dokuwiki-2016-06-26a/lib/tpl/dokuwiki/main.php	2017-02-01 11:15:28.521453300 +0100
@@ -93,10 +93,20 @@
                             }
                             $evt->advise_after();
                             unset($data);
                             unset($evt);
                         ?>
+						        <form class="button" method="get" action="<?php wl($ID)?>">
+									<div class="no">
+										<button type="submit" style="border: 0; background: transparent">
+											<img src="<?php echo DOKU_BASE?>lib/images/fileicons/pdf.png" alt="PDF Export" />
+										</button>
+										<input type="hidden" name="do" value="export_pdf" />
+										<input type="hidden" name="rev" value="<?php global $REV; echo $REV?>" />
+										<input type="hidden" name="id" value="<?php echo $ID?>" />
+									</div>
+								</form>
                     </ul>
                 </div>
             </div>
         </div><!-- /wrapper -->
 
